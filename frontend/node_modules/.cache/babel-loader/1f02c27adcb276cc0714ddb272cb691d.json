{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// const useFetch = (url, token) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n//   useEffect(() => {\n//     const fetchMyBooking = async () => {\n//       try {\n//         const response = await fetch(`https://car-rental-mern.onrender.com/${url}`, {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//         });\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch data\");\n//         }\n//         const data = await response.json();\n//         setData(data);\n//         setError(null);\n//         setIsPending(false);\n//       } catch (error) {\n//         console.error(error);\n//         setError(error);\n//         setIsPending(false);\n//       }\n//     };\n//     fetchMyBooking();\n//   }, [url, token]);\n//   return { data, isPending, error };\n// };\n// export default useFetch;","map":{"version":3,"names":[],"sources":["D:/CRS_Backend/frontend/src/hooks/useFetch.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n\r\n// const useFetch = (url, token) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [isPending, setIsPending] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchMyBooking = async () => {\r\n//       try {\r\n//         const response = await fetch(`https://car-rental-mern.onrender.com/${url}`, {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to fetch data\");\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         setData(data);\r\n//         setError(null);\r\n//         setIsPending(false);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//         setError(error);\r\n//         setIsPending(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchMyBooking();\r\n//   }, [url, token]);\r\n\r\n//   return { data, isPending, error };\r\n// };\r\n\r\n// export default useFetch;\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module"}